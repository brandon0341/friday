       ThrowInvalidArgumentError -ErrorId $errorId -ErrorMessage ($LocalizedData.CouldNotFindPrincipal -f $objectName)
    }

    return $principal
}

<#
.Synopsis
    Resolves a SID to a principal
#>
function ResolveSidToPrincipal
{
    [OutputType([System.DirectoryServices.AccountManagement.Principal])]
    param
    (
        [Parameter(Mandatory = $true)]
        [ValidateNotNull()]
        [System.DirectoryServices.AccountManagement.PrincipalContext] $principalContext,

        [Parameter(Mandatory = $true)]
        [ValidateNotNull()]
        [System.Security.Principal.SecurityIdentifier] $sid,

        [Parameter(Mandatory = $true)]
        [bool] $isLocalMachineQualified
    )
    Set-StrictMode -Version Latest

    [string] $sidValue = $Sid.Value

    # Try to find a matching principal.
    $principal = [System.DirectoryServices.AccountManagement.Principal]::FindByIdentity($principalContext, [System.DirectoryServices.AccountManagement.IdentityType]::Sid, $sidValue)

    if ($principal -eq $null)
    {
        [string] $errorId = $null
        if ($isLocalMachineQualified)
        {
            $errorId = "PrincipalNotFound_LocalMachine"
        }
        else
        {
            $errorId = "PrincipalNotFound_ProvidedCredential"
        }

        ThrowInvalidArgumentError -ErrorId $errorId -ErrorMessage ($LocalizedData.CouldNotFindPrincipal -f $sid.ToString())
    }

    return $prin